146. LRU Cache



Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, 
it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

****************************************************************************************
class LRUCache {
    private HashMap<Integer, CacheNode> cache;
    private CacheNode head;
    private CacheNode tail;
    private int capacity;
    private int size;
    
    public LRUCache(int capacity) {
        cache = new HashMap<>();
        this.capacity = capacity;
        head = new CacheNode();
        tail = new CacheNode();
        head.next = tail;
        tail.prev = head;
        size = 0;
    }
    private void addToHead(CacheNode node){
        CacheNode next = head.next;
       
        node.next = next;
        next.prev = node;
        
        node.prev = head;
        head.next = node;
    }
    private void remove(CacheNode node){
        CacheNode next = node.next;
        CacheNode prev = node.prev;
        
        prev.next = next;
        next.prev = prev;
    }
    private void moveToHead(CacheNode node){
        remove(node);
        addToHead(node);
    }
    private CacheNode evictTail(){
        CacheNode tailNode = tail.prev;
        remove(tailNode);
        return tailNode;       
    }
    public int get(int key) {
        CacheNode node = cache.get(key);
        if(node == null)
            return -1;
        moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        CacheNode node = cache.get(key);
        if(node == null){
            node = new CacheNode(key, value);
            cache.put(key, node);
            addToHead(node);
            size++;
            if(size > capacity){
                CacheNode tailNode = evictTail();
                cache.remove(tailNode.key);
                size--;
            }
        }
        else {
            node.value = value;
            moveToHead(node);
        }
    }
    private class CacheNode {
        public int key;
        public int value;
        public CacheNode next;
        public CacheNode prev;
        
        public CacheNode(){
            
        }
        public CacheNode(int k, int v){
            key = k;
            value = v;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */