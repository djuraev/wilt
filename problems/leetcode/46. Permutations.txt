46. Permutations

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

*********************************************************

public List<List<Integer>> permute(int[] nums) 
{
	if(nums == null || nums.length == 0)
		return Collections.EMPTY_LIST;
		
	LinkedList<List<Integer>> result = new LinkedList<>();
	result.add(new ArrayList<>());
   
	for(int n: nums)
	{
		int size = result.size();
		for(int i=0; i<size; i++)
		{
			List<Integer> perm = result.remove();
			for(int j=0; j<= perm.size(); j++)
			{
				List<Integer> tmp = new ArrayList<>(perm);
				tmp.add(j, n);
				result.add(tmp);
			}
		}
	}
	return result;
}