373. Find K Pairs with Smallest Sums
Medium

You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]] 
Explanation: The first 3 pairs are returned from the sequence: 
             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [1,1],[1,1]
Explanation: The first 2 pairs are returned from the sequence: 
             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [1,3],[2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]

******************************************************************************************


class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        if(nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0)
            return Collections.EMPTY_LIST;
        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<SumXY> heap = new PriorityQueue<>();
        int m = nums1.length;
        for(int x=0; x<m; x++)
        {
            SumXY pair = new SumXY(x, 0, nums1[x] + nums2[0]);
            heap.add(pair);
        }
        int count = k;
        int n = nums2.length;
        while(!heap.isEmpty() && count > 0)
        {
            SumXY topOfHeap = heap.poll();
            int x = topOfHeap.x;
            int y = topOfHeap.y;
            List<Integer> pair = new ArrayList<>();
            pair.add(nums1[x]);
            pair.add(nums2[y]);
            count--;
            result.add(pair);
            if(y == n-1)
                continue;
            SumXY nextPair = new SumXY(x, y+1, nums1[x] + nums2[y+1]);
            heap.add(nextPair);
        }
        return result;
    }
    private class SumXY implements Comparable<SumXY> {
        int x;
        int y;
        int sum;
        public SumXY()
        {
            
        }
        public SumXY(int x, int y, int sum)
        {
            this.x = x;
            this.y = y;
            this.sum = sum;
        }
        @Override
        public int compareTo(SumXY that)
        {
            return this.sum - that.sum;
        }
    }
}